import { Accumulator, BaseSignal, Cache, Listener, ReadableSignal } from './interfaces';
export declare class ExtendedSignal<T> implements ReadableSignal<T> {
    private _baseSignal;
    static merge<U>(...signals: BaseSignal<U>[]): ReadableSignal<U>;
    static promisify<U>(resolveSignal: BaseSignal<U>, rejectSignal?: BaseSignal<any>): Promise<U>;
    private _tagMap;
    constructor(_baseSignal: BaseSignal<T>);
    add(listener: Listener<T>, ...tags: any[]): void;
    remove(listenerOrTag: any): void;
    addOnce(listener: Listener<T>, ...tags: any[]): void;
    filter<U extends T>(filter: (payload: T) => payload is U): ReadableSignal<U>;
    filter(filter: (payload: T) => boolean): ReadableSignal<T>;
    map<U>(transform: (payload: T) => U): ReadableSignal<U>;
    merge<U>(...signals: BaseSignal<U>[]): ReadableSignal<T | U>;
    promisify(rejectSignal?: ReadableSignal<any>): Promise<T>;
    readOnly(): ReadableSignal<T>;
    reduce<U>(accumulator: Accumulator<T, U>, initialValue: U): ReadableSignal<U>;
    peek(peekaboo: (payload: T) => void): ReadableSignal<T>;
    cache(cache: Cache<T>): ReadableSignal<T>;
}
